using System;
using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;

class Program
{
    private static string _aiApiKey = "YOUR_AI_API_KEY_HERE";

    static async Task Main(string[] args)
    {
        Console.WriteLine("AI Command Processor");
        while (true)
        {
            Console.Write("> ");
            var input = Console.ReadLine();

            if (string.IsNullOrEmpty(input)) continue;

            if (input.ToLower() == "exit") break;

            var response = await GetAiResponse(input);
            Console.WriteLine($"AI Response: {response}");

            // Simulate command processing
            if (response.Contains("delete", StringComparison.OrdinalIgnoreCase))
            {
                Console.WriteLine("Simulating delete command...");
                // Implement your delete logic here
            }
            else if (response.Contains("status", StringComparison.OrdinalIgnoreCase))
            {
                Console.WriteLine("Simulating status check...");
                // Implement your status check logic here
            }
            else
            {
                Console.WriteLine("Unknown command.");
            }
        }
    }

    private static async Task<string> GetAiResponse(string input)
    {
        using var client = new HttpClient();
        client.DefaultRequestHeaders.Add("Authorization", $"Bearer {_aiApiKey}");

        var content = new StringContent($"{{\"prompt\":\"{input}\",\"max_tokens\":50}}", System.Text.Encoding.UTF8, "application/json");
        var response = await client.PostAsync("https://api.openai.com/v1/completions", content);
        var json = await response.Content.ReadAsStringAsync();
        var aiResponse = JObject.Parse(json)["choices"][0]["text"].ToString();

        return aiResponse.Trim();
    }
}
